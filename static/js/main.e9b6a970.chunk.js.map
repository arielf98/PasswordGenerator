{"version":3,"sources":["asset/key.svg","config/context/store.js","component/Button/index.js","component/Texfield/index.js","component/CheckBox/index.js","component/Tampilan/index.js","Halaman/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","initialState","store","createContext","Provider","StateProvider","children","useReducer","state","action","type","panjang","value","pass","Error","dispatch","ColorButton","withStyles","root","backgroundColor","teal","Button","ButtonGenerator","GlobalState","useContext","size","color","variant","onClick","len","arr","i","Math","floor","random","length","GeneratorPassword","TexfieldGenerator","TextField","id","style","margin","placeholder","fullWidth","InputProps","readOnly","CheckBoxGenerator","FormControl","component","RadioGroup","aria-label","name","onChange","event","target","FormControlLabel","control","Radio","label","Tampilan","Container","maxwidthmd","marginTop","Box","display","justifyContent","className","mt","src","key","alt","width","height","CheckBox","flexDirection","clone","my","mx","marginBottom","paddingLeft","Halaman","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e9b6a970.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/key.f7a96c9b.svg\";","import React, {createContext, useReducer} from 'react';\r\n\r\nconst initialState = {\r\n};\r\nconst store = createContext(initialState);\r\nconst { Provider } = store;\r\n\r\n\r\nconst StateProvider = ( { children } ) => {\r\n    const [state, dispatch] = useReducer((state, action) => {\r\n      switch(action.type) {\r\n        case 'CHOOSE_LENGTH':\r\n          const newState = { panjang : action.value }\r\n          return newState;\r\n        case 'GENERATOR_PASS':\r\n            const newPass = {...state, pass : action.value }\r\n            return newPass;\r\n        default:\r\n          throw new Error();\r\n      };\r\n    }, initialState);\r\n\r\n    // console.log(\"ini nilai di store\", state)\r\n  \r\n    return <Provider value={{ state, dispatch }}>{children}</Provider>;\r\n  };\r\n  \r\n  export { store, StateProvider }","import React, { useContext } from 'react'\r\nimport {  withStyles } from '@material-ui/core/styles';\r\nimport { teal } from '@material-ui/core/colors';\r\nimport Button from '@material-ui/core/Button';\r\nimport { store } from '../../config/context/store'\r\n\r\n\r\n//ini inisiasi props\r\n// const theme = createMuiTheme({\r\n//     palette: {\r\n//         primary: green\r\n//       }\r\n//   })\r\n\r\n  // ini untk buat props\r\nconst ColorButton = withStyles(() => ({\r\n    root: {\r\n      backgroundColor: teal[500],\r\n      '&:hover': {\r\n        backgroundColor: teal[700],\r\n      },\r\n    },\r\n  }))(Button);\r\n\r\n// ini untuk buat class\r\n  // const useStyles = makeStyles((theme) => ({\r\n  //   margin: {\r\n  //     margin: theme.spacing(1),\r\n  //   },\r\n  // }));\r\n\r\n  \r\n\r\nfunction ButtonGenerator() {\r\n\r\n  const GlobalState = useContext(store)\r\n  const { dispatch } = GlobalState;\r\n\r\n  // console.log(GlobalState.state.panjang)\r\n\r\n  const { panjang } = GlobalState.state\r\n\r\n  const GeneratorPassword = (len, arr) => {\r\n      let pass = \"\"\r\n\r\n      for( let i = len; i > 0; i-- ){\r\n        pass += arr[ Math.floor( Math.random() * arr.length ) ]\r\n      }\r\n      dispatch({ type: 'GENERATOR_PASS', value: pass })\r\n  }\r\n\r\n \r\n\r\n    return (   \r\n             <ColorButton size=\"large\" color=\"primary\" variant=\"contained\" onClick={() => GeneratorPassword(panjang, '1234abcdABCD-_+&%$#@!')} >\r\n                    <b> Generator Key </b> \r\n                </ColorButton>\r\n\r\n      \r\n    )\r\n}\r\n\r\nexport default ButtonGenerator\r\n","import React, { useContext } from 'react'\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { store } from '../../config/context/store'\r\n\r\nfunction TexfieldGenerator() {\r\n\r\n    const GlobalState = useContext(store)\r\n    const { pass } = GlobalState.state\r\n    return (\r\n        <div>\r\n            <TextField\r\n                        id=\"standard-full-width\"\r\n                        style={{ margin: 8 }}\r\n                        placeholder=\"Your Password Here\"\r\n                        fullWidth\r\n                        margin=\"normal\"\r\n                        value={pass}\r\n                        InputProps={{\r\n                            readOnly: true\r\n                        }}\r\n                        />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TexfieldGenerator\r\n","import React, { useContext } from 'react'\r\nimport RadioGroup from '@material-ui/core/RadioGroup';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Radio from '@material-ui/core/Radio';\r\nimport { store } from '../../config/context/store'\r\n\r\nfunction CheckBoxGenerator() {\r\n    const globalState = useContext(store);\r\n    const { dispatch } = globalState;\r\n\r\n    const handleChange = (event) => {\r\n        dispatch({ type: 'CHOOSE_LENGTH', value : event.target.value  })\r\n\r\n      };\r\n\r\n    return (\r\n        \r\n        <FormControl component=\"fieldset\">\r\n        <RadioGroup aria-label=\"password length\" name=\"genpassword lengthder1\" onChange={handleChange}>\r\n            <div>\r\n                <FormControlLabel value=\"20\" control={<Radio />} label=\"20\" />\r\n                <FormControlLabel value=\"30\" control={<Radio />} label=\"30\" />\r\n                <FormControlLabel value=\"40\" control={<Radio />} label=\"40\" />\r\n            </div> \r\n        </RadioGroup>\r\n      </FormControl>\r\n         \r\n      \r\n    )\r\n}\r\n\r\nexport default CheckBoxGenerator\r\n","import React  from 'react'\r\nimport { Container } from '@material-ui/core';\r\nimport Box from '@material-ui/core/Box';\r\nimport key from '../../asset/key.svg'\r\nimport './style.css'\r\nimport ButtonGenerator from '../Button'\r\nimport TextfieldGenerator from '../Texfield'\r\nimport CheckBoxGenerator from '../CheckBox';\r\n\r\n\r\n\r\n\r\nfunction Tampilan() {\r\n\r\n\r\n    return (\r\n    <div>\r\n        <Container maxwidthmd=\"true\" style={{ marginTop: \"2rem\" }} >\r\n        <Box display=\"flex\" justifyContent=\"center\">\r\n            <h1 className=\"text\" > \r\n            Password Generator\r\n            </h1>\r\n        </Box>\r\n\r\n        <Box display=\"flex\" justifyContent=\"center\" mt=\"6rem\">\r\n            <img src={key} alt=\" \"  width=\"150rem\" height=\"150rem\"/>\r\n        </Box>\r\n\r\n        <Container className=\"length-coiche\" >\r\n            <Box display=\"flex\" justifyContent=\"center\"  >\r\n            <CheckBoxGenerator/>\r\n            </Box>\r\n        </Container>\r\n\r\n        <Box color=\"text.primary\" display=\"flex\" flexDirection=\"column\" justifyContent=\"center\" clone my=\"auto\" mx=\"auto\">\r\n            <Box mt=\"5rem\" width=\"20rem\">\r\n\r\n                <Container style={{ marginBottom: \"2rem\", width: \"20rem\", paddingLeft: \"8px\" }} mx=\"auto\">\r\n                    <TextfieldGenerator/>\r\n                </Container>\r\n             <ButtonGenerator/>\r\n            </Box>\r\n        </Box>\r\n        </Container>\r\n    </div>\r\n    )\r\n}\r\n\r\nexport default Tampilan\r\n","import React from 'react'\r\nimport Tampilan from '../component/Tampilan'\r\n\r\nfunction Halaman() {\r\n    return (\r\n        <div>\r\n            <Tampilan/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Halaman\r\n","import React from 'react';\nimport './App.css';\nimport Halaman from './Halaman';\n\nfunction App() {\n  return (\n    <>\n      <Halaman/>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { StateProvider } from './config/context/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <StateProvider>\n      <App />\n    </StateProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}